pf <- read.csv('pseudo_facebook.tsv', sep = '/t')
pf <- read.csv('pseudo_facebook.tsv', sep = '\t')
View(pf)
install.packages('ggplot2')
library(ggplot2)
names(pf)
qplot(x = bod_year, data = pf)
qplot(x = dob_year, data = pf)
qplot(x = dob_day, data = pf)
qplot(x = dob_day, data = pf) +
scale_x_discrete(x = 1:31)
qplot(x = dob_day, data = pf) +
scale_x_discrete(breaks = 1:31)
theme_set(theme_minimal(24))
qplot(x = dob_day, data = pf) +
scale_x_discrete(breaks = 1:31)
theme_set(theme_minimal(12))
qplot(x = dob_day, data = pf) +
scale_x_discrete(breaks = 1:31)
qplot(x = dob_day, data = pf) +
scale_x_discrete(breaks = 1:31) +
facet_wrap(~dob_month, ncol = 3)
getwd()
pf <- read.csv('pseudo_facebook.tsv', sep = '\t')
install.packages('ggplot2')
library(ggplot2)
names(pf)
ggplot(aes(x = friend_count), data = pf)
qplot(x = friend_count, data = pf)
qplot(x = friend_count, data = pf, xlim = c(0, 100
qplot(x = friend_count, data = pf, xlim = c(0, 1000))
qplot(x = friend_count, data = pf, xlim = c(0, 1000))
qplot(x = friend_count, data = pf, xlim = c(0, 500))
qplot(x = friend_count, data = pf, xlim = c(0, 1000))
qplot(x = friend_count, data = pf, binwidth = 25,) +
scale_x_continous(limits = c(0, 1000), breaks = seq(0, 1000, 50))
qplot(x = friend_count, data = pf, binwidth = 25,) +
scale_x_continuous(limits = c(0, 1000), breaks = seq(0, 1000, 50))
qplot(x = friend_count, data = pf, binwidth = 25,) +
scale_x_continuous(limits = c(0, 1000), breaks = seq(0, 1000, 50)) +
facet_wrap(~gender, ncol = 2)
qplot(x = friend_count, data = pf, binwidth = 25,) +
scale_x_continuous(limits = c(0, 1000), breaks = seq(0, 1000, 50)) +
facet_wrap(~gender)
qplot(x = friend_count, data = subset(pf, !is.na(gender)), binwidth = 25,) +
scale_x_continuous(limits = c(0, 1000), breaks = seq(0, 1000, 50)) +
facet_wrap(~gender)
qplot(x = friend_count, data = subset(pf, !is.na(gender)), binwidth = 50,) +
scale_x_continuous(limits = c(0, 1000), breaks = seq(0, 1000, 50)) +
facet_wrap(~gender)
qplot(x = friend_count, data = subset(pf, !is.na(gender)), binwidth = 100,) +
scale_x_continuous(limits = c(0, 1000), breaks = seq(0, 1000, 50)) +
facet_wrap(~gender)
qplot(x = friend_count, data = subset(pf, !is.na(gender)), binwidth = 25,) +
scale_x_continuous(limits = c(0, 1000), breaks = seq(0, 1000, 50)) +
facet_wrap(~gender)
nstall.packages("ggplot2", dependencies = T)
install.packages("ggplot2", dependencies = T)
install.packages("knitr", dependencies = T)
install.packages("dplyr", dependencies = T)
install.packages('ggplot2', dependencies = TRUE)
library(ggplot2)
install.packages('RColorBrewer', dependencies = TRUE)
library(ggplot2)
data(diamonds)
head(diamonds)
library(ggplot2)
data(diamonds)
ggplot(aes(x= carat, y = price), diamonds) +
geom_point()
library(ggplot2)
data(diamonds)
ggplot(aes(x= carat, y = price)), diamonds) +
geom_point()
library(ggplot2)
data(diamonds)
ggplot(aes(x= carat, y = price)), data = diamonds) +
geom_point()
library(ggplot2)
data(diamonds)
ggplot(aes(x= carat, y = price), data = diamonds)) +
geom_point()
library(ggplot2)
data(diamonds)
ggplot(aes(x= carat, y = price), data = diamonds) +
geom_point()
library(ggplot2)
data(diamonds)
ggplot(aes(x= carat, y = price), data = diamonds) +
geom_point() +
xlim(0, quantile(diamonds$carat, 0.99)) +
ylim(0, quantile(diamonds$price, 0.99))
library(ggplot2)
data(diamonds)
ggplot(diamonds, aes(x= carat, y = price)) +
geom_point() +
xlim(0, quantile(diamonds$carat, 0.99)) +
ylim(0, quantile(diamonds$price, 0.99))
library(ggplot2)
data(diamonds)
ggplot(diamonds, aes(x= carat, y = price)) +
scale_x_continuous(lim = c(0, quantile(diamonds$carat, 0.99))) +
scale_y_continuous(lim = c(0, quantile(diamonds$price, 0.99)))
geom_point()
library(ggplot2)
data(diamonds)
ggplot(diamonds, aes(x= carat, y = price)) +
scale_x_continuous(lim = c(0, quantile(diamonds$carat, 0.99))) +
scale_y_continuous(lim = c(0, quantile(diamonds$price, 0.99)))
geom_point(fill = I('black'))
library(ggplot2)
data(diamonds)
ggplot(diamonds, aes(x= carat, y = price)) +
scale_x_continuous(lim = c(0, quantile(diamonds$carat, 0.99))) +
scale_y_continuous(lim = c(0, quantile(diamonds$price, 0.99))) +
geom_point()
library(ggplot2)
data(diamonds)
ggplot(diamonds, aes(x= carat, y = price)) +
scale_x_continuous(lim = c(0, quantile(diamonds$carat, 0.99))) +
scale_y_continuous(lim = c(0, quantile(diamonds$price, 0.99))) +
geom_point(color = I('blue'))
ggplot(diamonds, aes(x= carat, y = price)) +
scale_x_continuous(lim = c(0, quantile(diamonds$carat, 0.99))) +
scale_y_continuous(lim = c(0, quantile(diamonds$price, 0.99))) +
geom_point(color = I('blue')) +
stat_smooth(stat = 'lm')
ggplot(diamonds, aes(x= carat, y = price)) +
scale_x_continuous(lim = c(0, quantile(diamonds$carat, 0.99))) +
scale_y_continuous(lim = c(0, quantile(diamonds$price, 0.99))) +
geom_point(color = I('blue')) +
stat_smooth(method = 'lm')
ggplot(diamonds, aes(x= carat, y = price)) +
scale_x_continuous(lim = c(0, quantile(diamonds$carat, 0.99))) +
scale_y_continuous(lim = c(0, quantile(diamonds$price, 0.99))) +
geom_point(color = I('green')) +
stat_smooth(method = 'lm')
ggplot(diamonds, aes(x= carat, y = price)) +
scale_x_continuous(lim = c(0, quantile(diamonds$carat, 0.99))) +
scale_y_continuous(lim = c(0, quantile(diamonds$price, 0.99))) +
geom_point(color = I('black')) +
stat_smooth(method = 'lm')
# install these if necessary
install.packages('GGally')
install.packages('scales')
install.packages('memisc')
install.packages('lattice')
install.packages("scales")
install.packages("scales")
install.packages("scales")
install.packages("scales")
install.packages("scales")
install.packages("scales")
install.packages("scales")
install.packages("scales")
install.packages("scales")
install.packages("scales")
install.packages("scales")
install.packages("scales")
install.packages("scales")
install.packages("scales")
install.packages("scales")
install.packages("scales")
install.packages("scales")
install.packages("scales")
install.packages("scales")
install.packages("scales")
install.packages("scales")
install.packages("scales")
# install these if necessary
install.packages('GGally')
install.packages('scales')
install.packages('memisc')
install.packages('lattice')
install.packages('MASS')
install.packages('car')
install.packages('reshape')
install.packages('plyr')
# load the ggplot graphics package and the others
library(ggplot2)
library(GGally)
library(scales)
library(memisc)
# sample 10,000 diamonds from the data set
set.seed(20022012)
diamond_samp <- diamonds[sample(1:length(diamonds$price), 10000), ]
ggpairs(diamond_samp, params = c(shape = I('.'), outlier.shape = I('.')))
install.packages("scales")
install.packages("plyr")
install.packages("plyr")
set.seed(20022012)
diamond_samp <- diamonds[sample(1:length(diamonds$price), 10000), ]
ggpairs(diamond_samp, params = c(shape = I('.'), outlier.shape = I('.')))
set.seed(20022012)
diamond_samp <- diamonds[sample(1:length(diamonds$price), 10000), ]
ggpairs(diamond_samp,
lower = list(continuous = wrap("points", shape = I('.'))),
upper = list(combo = wrap("box", outlier.shape = I('.'))))
plot1 <- qplot(diamonds, aes(x = price)) +
geom_histogram()
library(gridExtra)
qplot(diamonds, aes(x = price)) +
geom_histogram()
qplot(diamonds, aes(x = price)) +
geom_histogram()
ggplot(diamonds, aes(x = price)) +
geom_histogram()
ggplot(diamonds, aes(x = price)) +
geom_histogram() +
ggtitle('Price')
library(gridExtra)
plot1 <- ggplot(diamonds, aes(x = price)) +
geom_histogram() +
ggtitle('Price')
plot2 <- ggplot(diamonds, aes(x = price)) +
geom_histogram() +
ggtitle('Price')
grid.arrange(plot1, plot2)
library(gridExtra)
plot1 <- ggplot(diamonds, aes(x = price)) +
geom_histogram() +
ggtitle('Price')
plot2 <- ggplot(diamonds, aes(x = price)) +
geom_histogram() +
scale_y_log10() +
ggtitle('Price (log10)')
grid.arrange(plot1, plot2)
library(gridExtra)
plot1 <- ggplot(diamonds, aes(x = price)) +
geom_histogram() +
ggtitle('Price')
plot2 <- ggplot(diamonds, aes(x = price)) +
geom_histogram() +
scale_x_log10() +
ggtitle('Price (log10)')
grid.arrange(plot1, plot2)
library(gridExtra)
plot1 <- ggplot(diamonds, aes(x = price)) +
geom_histogram(binwidth = 100) +
ggtitle('Price')
plot2 <- ggplot(diamonds, aes(x = price)) +
geom_histogram() +
scale_x_log10() +
ggtitle('Price (log10)')
grid.arrange(plot1, plot2)
library(gridExtra)
plot1 <- ggplot(diamonds, aes(x = price)) +
geom_histogram(binwidth = 100) +
ggtitle('Price')
plot2 <- ggplot(diamonds, aes(x = price)) +
geom_histogram(binwidth = 100) +
scale_x_log10() +
ggtitle('Price (log10)')
grid.arrange(plot1, plot2)
library(gridExtra)
plot1 <- ggplot(diamonds, aes(x = price)) +
geom_histogram(binwidth = 100) +
ggtitle('Price')
plot2 <- ggplot(diamonds, aes(x = price)) +
geom_histogram(binwidth = 0.1) +
scale_x_log10() +
ggtitle('Price (log10)')
grid.arrange(plot1, plot2)
library(gridExtra)
plot1 <- ggplot(diamonds, aes(x = price)) +
geom_histogram(binwidth = 100) +
ggtitle('Price')
plot2 <- ggplot(diamonds, aes(x = price)) +
geom_histogram(binwidth = 0.01) +
scale_x_log10() +
ggtitle('Price (log10)')
grid.arrange(plot1, plot2)
library(gridExtra)
plot1 <- ggplot(diamonds, aes(x = price)) +
geom_histogram(binwidth = 100) +
ggtitle('Price')
plot2 <- ggplot(diamonds, aes(x = price)) +
geom_histogram(binwidth = 0.01) +
scale_x_log10() +
ggtitle('Price (log10)')
grid.arrange(plot1, plot2, ncol = 2)
ggplot(aes(carat, price), data = diamonds) +
geom_point() +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
cuberoot_trans = function() trans_new('cuberoot', transform = function(x) x^(1/3),
inverse = function(x) x^3)
ggplot(aes(carat, price), data = diamonds) +
geom_point() +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
ggplot(aes(carat, price), data = diamonds) +
geom_point(alpha = 1/2) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
ggplot(aes(carat, price), data = diamonds) +
geom_point(alpha = 1/2, size = 3/4) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
ggplot(aes(carat, price), data = diamonds) +
geom_point(alpha = 1/2, size = 3/4, position = 'jitter') +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
# install and load the RColorBrewer package
install.packages('RColorBrewer')
library(RColorBrewer)
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
# install and load the RColorBrewer package
install.packages('RColorBrewer')
library(RColorBrewer)
ggplot(aes(x = carat, y = price, color = clarity), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
install.packages("RColorBrewer")
ggplot(aes(x = carat, y = price, color = cut), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Cut')
ggplot(aes(x = carat, y = price, color = cut), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Cut', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Cut')
ggplot(aes(x = carat, y = price, color = cut), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Cut', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Cut')
ggplot(aes(x = carat, y = price, color = color), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = "Color", reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Color')
getwd()
setwd("/Users/robertozanchi/Desktop/Udacity/P4")
setwd()
setwd("/Users/robertozanchi/Desktop/Udacity/DAND/P4")
knitr::opts_chunk$set(echo = TRUE)
contribution_data <- read.csv("NY.csv")
library(dplyr)
library(ggplot2)
library(magrittr)
summary(contribution_data)
levels(contribution_data$cand_nm)
ggplot(data = contribution_data, aes(x = contribution_data$cand_nm)) +
geom_bar() +
theme(text = element_text(size=12), axis.text.x = element_text(angle=90, vjust=.5)) +
xlab('Presidential candidates') +
ylab('Number of contributions received')
head(summary(contribution_data$contbr_city))
# Top 10 contributors' cities by number of contributions
top_cities = contribution_data %>%
group_by(contbr_city) %>%
tally() %>%
arrange(desc(n)) %>%
top_n(10)
ggplot(aes(x=contbr_occupation, y=n), data=all_occupations) +
geom_bar(stat='identity') +
theme(text = element_text(size=12),
axis.text.x = element_text(angle=90, vjust=.5)) +
xlab('Occupation of contributor') +
ylab('Number of contributions')
# Top 10 occupations by number of contributions ex. retired and not employed
all_occupations = contribution_data %>%
filter(contbr_occupation != '',
contbr_occupation != 'INFORMATION REQUESTED',
contbr_occupation != 'INFORMATION REQUESTED PER BEST \n
EFFORTS') %>%
group_by(contbr_occupation) %>%
tally() %>%
arrange(desc(n)) %>%
top_n(10)
ggplot(aes(x=contbr_occupation, y=n), data=all_occupations) +
geom_bar(stat='identity') +
theme(text = element_text(size=12),
axis.text.x = element_text(angle=90, vjust=.5)) +
xlab('Occupation of contributor') +
ylab('Number of contributions')
contribution_data <- read.csv("NY.csv")
library(dplyr)
library(ggplot2)
library(magrittr)
# Top 10 occupations by number of contributions ex. retired and not employed
all_occupations = contribution_data %>%
filter(contbr_occupation != '',
contbr_occupation != 'INFORMATION REQUESTED',
contbr_occupation !=
'INFORMATION REQUESTED PER BEST EFFORTS') %>%
group_by(contbr_occupation) %>%
tally() %>%
arrange(desc(n)) %>%
top_n(10)
# Top 10 occupations by number of contributions ex. retired and not employed
all_occupations = contribution_data %>%
filter(contbr_occupation != '',
contbr_occupation != 'INFORMATION REQUESTED',
contbr_occupation !=
'INFORMATION REQUESTED PER BEST EFFORTS') %>%
group_by(contbr_occupation) %>%
tally() %>%
arrange(desc(n)) %>%
top_n(10)
ggplot(aes(x=contbr_occupation, y=n), data=all_occupations) +
geom_bar(stat='identity') +
theme(text = element_text(size=12),
axis.text.x = element_text(angle=90, vjust=.5)) +
xlab('Occupation of contributor') +
ylab('Number of contributions')
# Top 10 occupations by number of contributions ex. retired and not employed
top_employers = contribution_data %>%
filter(contbr_employer != '',
contbr_employer != 'FREELANCE',
contbr_employer != 'HOMEMAKER',
contbr_employer != 'RETIRED',
contbr_employer != 'SELF-EMPLOYED',
contbr_employer != 'NOT EMPLOYED',
contbr_employer != 'N/A',
contbr_employer != 'NONE',
contbr_employer != 'SELF',
contbr_employer != 'SELF EMPLOYED',
contbr_employer != 'INFORMATION REQUESTED',
contbr_employer !=
'INFORMATION REQUESTED PER BEST EFFORTS') %>%
group_by(contbr_employer) %>%
tally() %>%
arrange(desc(n)) %>%
top_n(10)
ggplot(aes(x=contbr_employer, y=n), data=top_employers) +
geom_bar(stat='identity') +
theme(text = element_text(size=12),
axis.text.x = element_text(angle=90, vjust=.5)) +
xlab('Employer of contributor') +
ylab('Number of contributions')
positive_contributions = subset(contribution_data,
contribution_data$contb_receipt_amt > 0)
# Plot density of contribution amounts
ggplot(positive_contributions, aes(x=contb_receipt_amt)) +
geom_density() +
scale_x_log10() +
scale_y_sqrt() +
xlab('Contribution amount (USD) (log10)') +
ylab('Density (sqrt)')
ggplot(select_data, aes(x=contb_receipt_amt)) +
geom_density() +
xlab('Contribution amount (USD)') +
ylab('Density')
# Select based on criteria
select_data = filter(contribution_data,
contb_receipt_amt > 0 & contb_receipt_amt <= 2700 &
!is.na(contb_receipt_dt))
# Convert dates from strings to the Date datatype
select_data$contb_receipt_dt = as.Date(select_data$contb_receipt_dt, "%d-%b-%y")
ggplot(select_data, aes(x=contb_receipt_amt)) +
geom_density() +
xlab('Contribution amount (USD)') +
ylab('Density')
ggplot(select_data, aes(x=contb_receipt_dt, y=contb_receipt_amt)) +
stat_summary(fun.y="mean", geom="bar") +
xlab('Date of contribution') +
ylab('Contribution amount (USD (mean)')
